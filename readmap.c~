#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h> 
#include <sys/types.h>
#include <unistd.h>

#define MLENGTH 6000000
#define MINMATCH 25


		
char sequence[MLENGTH];
int seqlength;

// parameters
int match =1;
int mismatch=-1;
int h=-5;
int g=-1;






char alpha[30];
int nalpha;

char line[1024];
int loadseq(char* filename)
{
	FILE *fin= fopen(filename, "r");

	while(fgets(line, 1024, fin))
	{
		if(line[0]=='>')
			continue;
		line[strlen(line)-1]='\0';
		strcat(sequence, line);
	}

	
	sequence[strlen(sequence)]='$';
	
	fclose(fin);

	return strlen(sequence);
}

int loadalpha(char *filename)
{
	FILE* fin= fopen(filename, "r");
	int i=0;
	while(fgets(line, 1024, fin))
	{
		char* p=strtok(line, " \t\n");
		
		
		while(p!=NULL)
		{
			alpha[i]=*p;
			i++;
			p=strtok(NULL, " \n");
		}
	}

	alpha[i]='$';

	fclose(fin);
	return i+1;
}

int findid(int k)
{

	char c= sequence[k];

	int i=0;
	while(alpha[i])
	{
		if(alpha[i]==c)
			return i;
		i++;
	}

}


int leafID;	// <seqlength
int internalID;	// initial with seqlength, from root

typedef struct node
{
	int id;
	struct node* sl;
	struct node* parent;
	struct node** children;  //nalpha
	int start; int end;	//parent edge;
	int depth;		//length from root

	int start_leaf_index;
	int end_leaf_index;
}NODE;




NODE *makenode(int start, int end, int id, int depth)
{
	NODE* p=(NODE * )malloc(sizeof(NODE));
	p->id= id;
	p->sl=0;
	p->parent=0;

	p->children= malloc(nalpha*sizeof(NODE*));  
	memset(p->children, 0, nalpha*sizeof(NODE*));

	p->start=start; 
	p->end=end;

	p->depth=depth;

	return p;
}

NODE* breaknode(NODE *p, int j, int i, int s)
{

	////printf("break node\n");
	int id = findid(p->start);
			
	NODE * q= makenode(p->start,j-1, internalID,p->depth- (p->end-j+1) );
	internalID++;
	////printf("make internal %d, %d, %d, %d\n",  q->id,q->start, q->end, q->depth);

	

	q->parent= p->parent;
	p->parent->children[id] = q;
						
				
	// update p
	p->start= j;
	p->parent=q;
				
	id= findid(j);					
	q->children[id]=p;							
			
	NODE * leaf=makenode( i, seqlength-1, s, seqlength-i+q->depth);
	////printf("makeleaf %d, %d, %d, %d\n",  leaf->id,leaf->start, leaf->end, leaf->depth);						
	leaf->parent= q;					
	id= findid(i);
	q->children[id]=leaf;
					
	return leaf;

				
}
 
NODE * findPath(int i, NODE *p, int s)
{

	////printf("findpath \n");
	while(i<seqlength)
	{
		int id =findid(i);
				
		if(p->children[id]==0)
		{
			////printf("IA %d\n", s);
			
			NODE* q= makenode(i,seqlength-1, s, seqlength-i+p->depth); //start end id depht

			////printf("make leaf for %d,%d, %d, %d\n", q->id, q->start,q->end, q->depth);
			p->children[id]=q;
			q->parent=p;
					

			return q;
			
		}	
		else
		{

			////printf("IB %d\n", s);
			p= p->children[id];


			int j=p->start;

			while(j<=p->end && i<seqlength)
			{
				if(sequence[i]!=sequence[j])
					break;
				i++;
				j++;
			}

			if(j<=p->end)		// not match
				return breaknode(p, j, i,s ); // old node, j for update, i for leaf, s for suffix id
			
		}
	}
}
			
	

NODE* nodhop(int * k, int b,NODE *v)
{

	int i = *k;
	//////////printf("nodhop %d, %d, %d\n", v->id, i, b);
	while(b)
	{
		int id= findid(i);
	
		v = v->children[id] ;

		//////////printf("loop %d, %d\n", i, v->id);
		
		int length= v->end-v->start+1;
		//////////printf("length %d\n", length);

		if(length ==b)
		{
			//////////printf("length == b\n");
			b-=length;
			i+=length;
			break;
		}

		else if(length>b)
		{

			//////////printf("length >= b\n");

			
			NODE * q= makenode(v->start,v->start+b-1, internalID,v->depth -(length-b));
			//////////printf("makeinternal node %d,%d,%d,%d\n",q->id, q->start, q->end, q->depth );
			internalID++;
				
			q->parent= v->parent;

			int id =findid(v->start);
			v->parent->children[id] = q;

			id= findid(v->start+b);
			q->children[id]=v;
	
								
			// update v
			v->start= v->start+b;
			v->parent=q;
				
								
			i+=b;			
			b-=b;			
			v=q;
			break;
		}
	
		//////////printf("length< b\n");
		b-=length;
		i+= length;
		
		//id=findid(i);

		////////////printf("i , char %d, %c\n", i, sequence[i]);
		//v=v->children[id];
		////////////printf();

	}

	*k=i;
	return v;

}
NODE* root;
char topcommand[100];
buildTree()
{

	internalID = seqlength;
	

	clock_t Start_t= clock(); //record time that task 1 begins


	root = makenode(-1,-1,internalID,0);

	root->parent=root;
	root->sl=root;

	
	internalID++;
	////////////printf("internal ID %d\n", internalID);

	NODE * p=root;
	////printf("%d\n", p);
	
	int s =0;
	
	
	for (s =0; s<seqlength;s++)
	{

		////printf("++++++++++++++++++++++++++\n");
		////printf("iter %d, %d, %d, %d, %d\n", s, p->id, p->start, p->end, p->depth);
		////printf("++++++++++++++++++++++++++\n");

	//	printTree(root);
		
		if(p->parent->sl)
		{	
			p=p->parent->sl;
				
			int i=s+p->depth;
			
			p= findPath(i,p,s);
			continue;
		}
		else
		{

			NODE * u= p->parent;
			NODE *v= u->parent->sl;

			int b= 0;
			int i=s;

			if(u->parent==root)
			{
				//////printf("II B \n");
				b= u->end-u->start;
			}
			else
			{
				//////printf("II A \n");
				b = u->end - u->start +1;
				i+=v->depth;
			}
		

			p= nodhop(&i, b,v);
			//////////printf("return of nodehop %d, %d\n", i, v->id);

			u->sl=p;
			p=findPath(i, p, s);
		}	
	}	
	
	clock_t End_t = clock();    
	printf("Build Tree Time %ld clock with rate %d (cps)\n ", End_t-Start_t, CLOCKS_PER_SEC);
//	//printf("#internal %d, #leaves %d, #total %d, size %d\n", internalID -seqlength, seqlength,internalID, internalID*sizeof(NODE));

	
}

//print some basic statistics about the tree (#internal nodes, #leaves, #total number of nodes, size of the tree (in bytes), 
//average string-depth of an internal node, string-depth of the deepest internal node)

int maxdepth;
int sumdepth;
NODE * maxnodes[10];
int *potdepths;
int *dfsdepths;
int d;
printTree(NODE *p)
{	
	if(p->id>=seqlength)	// internal node
	{


		int i =0;
	
	
		for (i =0; i<nalpha; i++)
		{
			if(p->children[i]==0)		
				continue;
	
			printTree(p->children[i]);
		}


		sumdepth+=p->depth;
		if(p->depth>maxdepth)	
		{
			maxdepth=p->depth;
		//	maxnode=p;
		}
	}


	/*	if(p->depth==0)
	{
		//printf("root\t%d\t%d\n", p->id, p->depth);
		return;
	}
	for(i =p->start; i<= p->end;i++)
		//printf("%c", sequence[i]);
	//printf("\t%d\t%d\n", p->id, p->depth);
*/
	
	potdepths[d]=p->depth;
	d++;

}


int* leafArray;
int  leafID =0;

int maxn;
DFS(NODE* p)
{

	//dfsdepths[d]=p->depth;
	//d++;
	int i =0;
	
	p->start_leaf_index=leafID;
	if(p->id>=seqlength)	//internal
	{
		

		for (i =0; i<nalpha; i++)
		{
			if(!p->children[i])
				continue;
			DFS(p->children[i]);
		}

		if(p->depth==maxdepth)
		{
		//	//printf("Max ID %d ", p->id);
			maxnodes[maxn]=p;
			maxn++	;
		}
		
	}

	else
	{
		leafArray[leafID]=p->id;
		leafID++;
		
	}
	p->end_leaf_index=leafID-1;
}
printDepth(int * depths)
{
	int i=0;
	int j=0;
	while(i<internalID)
	{
		
		for(j=i; j<i+10 && j<internalID; j++ )
		{
			//printf("%d ",depths[j]);
		}
		
		//printf("\n");
		i+=10;
	}

}

char* longest;

catparent(char * s, NODE* p)
{
	if(p==root)
		return;
	catparent(s, p->parent);
	strncat(s, sequence+p->start, p->end-p->start+1);

}

printLongest(NODE * p)
{
	longest =(char *)malloc (p->depth+2);
	memset(longest, 0, p->depth+2);
	catparent(longest, p->parent);
	strncat(longest, sequence+p->start, p->end-p->start+1);

	char* s= longest;

	while(*s)
	{
		//printf("%.60s\n",s )	;	
		s+=60;
	}
}

printChildren(NODE *p)
{
	int i=0;
	NODE *c;

	if(p->id<seqlength)	// leaf
	{
		//printf("%d\t",p->id );
		return;
	}

	for(i=0;i<nalpha;i++)
	{
		if(!p->children[i])
			continue;
		printChildren(p->children[i]);
		
	}
	//printf("\n");

}


int readCount=0;

char readSeq[110];

NODE* lcs;
int maxLcs=0;

int findbranch(char c)
{
	int i=0;
	while(alpha[i])
	{
		if(alpha[i]==c)
			return i;
		i++;
	}

}
















typedef struct tab
{
	int S;
	int D;
	int I;

	int T;


	char dir;
	
} TABLE;

TABLE ** table;

int maxT;
TABLE* maxTable;


traceback(int x1, int y1, int x2, int y2 , char* readSeq, int seq_start,FILE *fout, int *max_cover, int* max_start, int* max_end)
{


	int l=x2;
	int k=y2;
	if(x1<0||y1<0||l<0||k<0)
		return;

	if(x1>=x2 ||y1>=y2)
		return;

	
	   int i=0;
	   int j=0;
	
	
	 int  max=0;
	   for(i=x1;i<=x2;i++)
	   {
		for(j=y1;j<=y2;j++)
		{
			if(max<table[i][j].T)
			{
				max=table[i][j].T;
				l=i;
				k=j;
			}
		}
		
	   }

	 


	int end =l;
	

 	int minlen=((x2-x1)<(y2-y1))?(x2-x1):(y2-y1)+1;


	int acount=0;	
	int nmatchs=0;
	int gaps=0;
	int opens=0;

	int endx= l;
	int endy=k;

//	//printf("before trace loop %d,%d\n",l,k);  
 	while(l>x1 && k>y1)
   	{	
	 if(table[l][k].dir=='N')
		break;

	//////printf("enter traceback\n");
	if(table[l][k].dir=='D')
	{
		

		//////printf("enter D\n");
		
		acount++;
		gaps++;
	

		l--;

		if(table[l][k].dir!='D')
			opens++;
	}

	else if (table[l][k].dir=='I')
	{

		//////printf("enter I\n");

		
		acount++;
		gaps++;
		

		k--;
		if(table[l][k].dir!='I')
			opens++;
	}
		
	else
	{

	
		if(sequence[seq_start+l-1]==readSeq[k-1])
		{
		
			nmatchs++;
		}
	
		acount++;
		
		
	
		l--;k--;

	}

   }	


	int percentage= 100*nmatchs/acount; 
	int coverage= 100*acount/strlen(readSeq); 


	if(percentage>90 && coverage>80)
	{
	
	//	//printf(" hit (%d, %d)\n",  seq_start+l,seq_start+end);
	
		if(coverage>* max_cover)
		{
			*max_start=seq_start+l;
	
			*max_end=seq_start+end;
		}
					
	}

}


localAlignment(int seq_start, int seq_end, char * readSeq,FILE *fout,int * max_cover, int *max_start, int* max_end)
{

	
//	//printf("seq_start %d,seq_end %d\n",seq_start,seq_end);
	int m = seq_end-seq_start+1;

	int n= strlen(readSeq);

	table= (TABLE **) malloc((m+1)* sizeof(TABLE *));
	
	int i=0;
	int j=0;

	for(i=0;i<m+1;i++)	//m+1 row
	{
		table[i]=(TABLE *)malloc((n+1)*sizeof(TABLE));   // n_1 col
		memset(table[i], 0, (n+1)*sizeof(TABLE)/sizeof(char));
	}


	// S
	for(i=1;i<m+1;i++)
		table[i][0].S=-10000;	
	

	for(j=1;j<n+1;j++)
		table[0][j].S=-10000;				
	
	

	table[0][0].S=0;


	// D	
	table[1][0].D=h+g;
	for(i=2;i<m+1;i++)
		table[i][0].D=table[i-1][0].D+g;


	for(j=0;j<n+1;j++)
		table[0][j].D=-10000;		

	

	//I 
	table[0][1].I=h+g;
	for(j=2;j<n+1;j++)
		table[0][j].I=table[0][j-1].I+g;

	for(i=0;i<m+1;i++)
		table[i][0].I=-10000;	


	//T
	table[0][0].T=0;

	table[1][0].T=h+g;
	for(i=2;i<m+1;i++)
		table[i][0].T=table[i-1][0].T+g;


	table[0][1].T=h+g;
	for(j=2;j<n+1;j++)
		table[0][j].T=table[0][j-1].T+g;



	int theta=0;

	////printf("inite done\n");
	

	for(i=1;i<m+1;i++)
	{

		for(j=1; j<n+1; j++)
		{

			////printf("%c, %c\n",sequence[seq_start],readSeq[0]);			
			////printf("%c, %c\n",sequence[i-1],readSeq[j-1] );

			if(sequence[i+seq_start-1]==readSeq[j-1])
				theta = match;
			else
				theta= mismatch;


			////printf("theta %d\n",theta);
			table[i][j].S = table[i-1][j-1].T+theta;

			////printf("%d,%d : s %d\n", i,j,table[i][j].S);	


		
			table[i][j].D = ( (table[i-1][j].D+g) >( table[i-1][j].T+h+g) )? (table[i-1][j].D+g):( table[i-1][j].T+h+g);

		//	////////printf("%d,%d : d %d\n", i,j,table[i][j].D);	
			

		//	////////printf("Di-1 %d\n",table[i-1][j].D);
		//	////////printf("Ti-1 %d\n",table[i-1][j].T);


			table[i][j].I = ( (table[i][j-1].I+g)>( table[i][j-1].T+h+g) )? (table[i][j-1].I+g):( table[i][j-1].T+h+g) ;

			

			table[i][j].T= (table[i][j].S>table[i][j].D )?table[i][j].S:table[i][j].D;


			table[i][j].dir =(table[i][j].S>table[i][j].D )?'S':'D';

			table[i][j].T= (table[i][j].T>table[i][j].I)?table[i][j].T:table[i][j].I;
			table[i][j].dir =(table[i][j].T>table[i][j].I )?table[i][j].dir:'I';

		

			table[i][j].T= (table[i][j].T>0)?table[i][j].T:0;
			table[i][j].dir =(table[i][j].T>0 )?table[i][j].dir:'N';

		
		//	//printf("%d,%d,%d,%d,%c\n",table[i][j].T,table[i][j].S,table[i][j].D,table[i][j].I, table[i][j].dir);
		//	break;

		}

		
	}

	////printf("table done\n");
	traceback(0,0,m,n, readSeq, seq_start,fout, max_cover, max_start, max_end);


	for(i=0;i<m+1;i++)	//m+1 row

		free(table[i]);
		



	free(table);

}










int matchcount;


findLoc(char *readSeq, NODE *root)
{
	
	maxLcs=0;
	int s =0;
	int l=strlen(readSeq);

	//printf("%d\n",l);
	int match=0;
	
	NODE* p=root;

	for(s=0;s< l-25 ; s++)
	{
		if(p->sl)
			p=p->sl;
		else

			p=root;
		int i=s+p->depth;

	//	//printf("%.10s\n",readSeq+i);	

		while(i<l)
		{

			int id= findbranch(readSeq[i]);
		

			if(p->children[id]==0)
			{
				////printf("break at node\n");

				if(p->depth>maxLcs)
				{
					maxLcs=p->depth;
					lcs=p;
					
				}
				break;
			}
			
			else
			{
				
				p= p->children[id];


				
				int j=p->start;
	
				
				

				while(j<=p->end && i<l)
				{
					if(readSeq[i]!=sequence[j])
						break;
					i++;
					j++;
				}
				
				if(j<p->end)		// not match
				{
				//	//printf("break between node\n");
					
					int less= p->end-j+1;
				
					if(p->depth-less >maxLcs)
					{
						maxLcs=p->depth-less ;
						lcs=p;
					
					}

					p=p->parent;
					break;
				}
				else
				{
					if(i==l)
					{
						if(p->depth>maxLcs)
						{
							maxLcs=p->depth;
							lcs=p;
					
						}

						break;
					}
					

				}
	

			}
		}

	}

}

int alignmentCount;
mapRead( char* readfile)
{
	

	FILE *fin= fopen(readfile, "r");

	FILE *fout= fopen("MapPearch.txt","w");

	while(fgets(line, 1024, fin))
	{
		if(line[0]=='>')
		{

			

			////printf("%d\n",readCount);
			if(readCount!=0)
			{
				int	l =strlen(readSeq);	
		

		

				findLoc(readSeq,root);

				if(maxLcs>MINMATCH)
				{

					int leaf;
				
					int max_start=-1;
					int max_end=-1;
					int max_cover=-1;
			
					for(leaf=lcs->start_leaf_index;leaf<=lcs->end_leaf_index; leaf++)
					{
					

						////printf("maxLcs %d, suffix %d", maxLcs,leafArray[leaf]);
						int suffix= leafArray[leaf];
	
						int seq_start= (suffix-l>0)?suffix-l:0;
						int seq_end= (suffix+l<seqlength)?suffix+l:seqlength-1;

				
						alignmentCount++;
					
						localAlignment(seq_start, seq_end, readSeq,fout, &max_cover,&max_start, &max_end);
					
					

					}
					if(max_cover>80)
							fprintf(fout,"best hit (%d, %d)\n", max_start, max_end);

				}
			
			//	//printf("%d\n",maxLcs);
			
			}
		
			fprintf(fout,"%s",line);
			readCount++;
			readSeq[0]='\0';
			continue;
		}
		line[strlen(line)-1]='\0';
		strcat(readSeq, line);
	}

	////printf("%d\n",readCount);
	int l=strlen(readSeq);
	findLoc(readSeq,root);

				if(maxLcs>MINMATCH)
				{

					int leaf;
				
					int max_start=-1;
					int max_end=-1;
					int max_cover=-1;
			
					for(leaf=lcs->start_leaf_index;leaf<=lcs->end_leaf_index; leaf++)
					{
					

					//	//printf("maxLcs %d, suffix %d", maxLcs,leafArray[leaf]);
						int suffix= leafArray[leaf];
	
						int seq_start= (suffix-l>0)?suffix-l:0;
						int seq_end= (suffix+l<seqlength)?suffix+l:seqlength-1;

				

						alignmentCount++;
						localAlignment(seq_start, seq_end, readSeq,fout, &max_cover,&max_start, &max_end);
					

					}
				if(max_cover>80)
			
						fprintf(fout,"best hit (%d, %d)\n", max_start, max_end);

			}


	
//printf("alignmentCount %d, readCount %d\n",alignmentCount, readCount);
	fclose(fin);


}


readCof(char * conFile)
{

	////printf("%s\n", conFile);
	FILE* cf=fopen(conFile, "r");

	while(fgets(line, 1024, cf))
	{
		if(strncmp(line, "match", 5)==0)
		{
			strtok(line, " \t\n");
			char* p=strtok(NULL, " \t\n");
		
			match= atoi(p);
			////printf("%d\n", match);

			continue;
		}

		if(strncmp(line, "mismatch", 8)==0)
		{
			strtok(line, "\t");
			char* p=strtok(NULL, " \t\n");
			
			mismatch= atoi(p);
			continue;
		}

		if(strncmp(line, "h", 1)==0)
		{
			strtok(line, "\t");
			char* p=strtok(NULL, " \t\n");
			h= atoi(p);

			continue;
		}


		if(strncmp(line, "g", 1)==0)
		{
			strtok(line, "\t");
			char* p=strtok(NULL, " \t\n");
			g= atoi(p);
			continue;
		}

	
	} 


	////printf("Paras %d, %d,%d,%d\n",match, mismatch,h,g);
	fclose(cf);
}





//$ <test executable> <input file containing sequence s> <input alphabet file> 
int main(int argc, char* argv[])
{


	seqlength=loadseq(argv[1]);
	//printf("seqlength %d \n", seqlength);


	nalpha=loadalpha(argv[2]);			
	////printf("nalpha %d \n",nalpha);


	
	buildTree();
	
	
	//// top results
/*	pid_t pid=getpid();
	////printf("pid %d\n", pid);
	
	s//printf(topcommand, "top -b -n 1 -p %d >%s.top ", pid , argv[1]);

	system(topcommand);
*/
	
	/////post -order print
/*	potdepths=malloc(internalID*sizeof(int));
	memset(potdepths, 0, internalID*sizeof(int));

	////printf("\n\n++++++++++++++++\n");
	printTree(root);		// post-order, find max depth here

	//printf("post-order traversal depths\n");
	printDepth(potdepths);

*/	


	leafArray=malloc((seqlength+1)*sizeof(int));
	memset(leafArray,-1, (seqlength+1)*sizeof(int));

	printf("\n\n++++++++++++++++\n");
	clock_t Start_t= clock();
	DFS(root);	
	clock_t End_t = clock();    
	printf("PrepareST %ld clock with rate %d (cps)\n ", End_t-Start_t, CLOCKS_PER_SEC);


//	readCof(argv[4]);


	mapRead(argv[3]);
return;


	
		
//	//printf("DFS depths\n");	
//	printDepth(dfsdepths);

	
	// longest exact matching
/*	//printf("\n\n++++++++++++++++\n");

	//printf("avg internal depth: %d, max internal depth: %d\n", sumdepth/(internalID-seqlength),maxdepth );	
	int i =0;
	while(maxnodes[i])
	{
		//printf("longest exact matching sequence is at node %d :\n", maxnodes[i]->id);
		printLongest(maxnodes[i]);

		//printf("for suffix :\n");
		printChildren(maxnodes[i]);	
		i++;
		//printf("\n");
	}
*/

}
